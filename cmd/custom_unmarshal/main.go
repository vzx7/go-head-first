package main

import (
	"encoding/json"
	"fmt"
)

type User struct {
	Name    string  `json:"username"`
	Surname *string `json:"surname,omitempty"`
}

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è UnmarshalJSON
func (u *User) UnmarshalJSON(data []byte) error {
	fmt.Println("üì• Raw JSON input:", string(data))

	// –®–∞–≥ 1: –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é)
	type Alias User
	aux := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// –®–∞–≥ 2: –æ–±—ã—á–Ω—ã–π unmarshal –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	// –®–∞–≥ 3: –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á "surname" –≤ JSON
	var rawMap map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMap); err != nil {
		return err
	}

	if _, ok := rawMap["surname"]; ok {
		fmt.Println("‚úÖ –ü–æ–ª–µ 'surname' –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢ –≤ JSON")
	} else {
		fmt.Println("‚ùå –ü–æ–ª—è 'surname' –ù–ï–¢ –≤ JSON")
	}

	return nil
}

func main() {
	// –í–∞—Ä–∏–∞–Ω—Ç 1: —Å —Ñ–∞–º–∏–ª–∏–µ–π
	jsonWithSurname := `{
		"username": "Max",
		"surname": "Payne"
	}`

	var u1 User
	json.Unmarshal([]byte(jsonWithSurname), &u1)
	fmt.Printf("Parsed user: %+v\n\n", u1)

	// –í–∞—Ä–∏–∞–Ω—Ç 2: –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏
	jsonWithoutSurname := `{
		"username": "Lara"
	}`

	var u2 User
	json.Unmarshal([]byte(jsonWithoutSurname), &u2)
	fmt.Printf("Parsed user: %+v\n", u2)
}
